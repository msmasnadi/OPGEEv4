[DEFAULT]

# This project is used if '-P' flag not given to the 'gt' command
OPGEE.DefaultProject =

# This defines the variable for documentation purposes. The value
# is set automatically in each project section to the name of that
# section -- unless a non-blank value already exists in the section.
OPGEE.ProjectName =

# Root directory for where the user keeps project folders
OPGEE.ProjectRoot = %(Home)s/projects
OPGEE.ProjectDir  = %(OPGEE.ProjectRoot)s/%(OPGEE.ProjectName)s

# Where to find sub-command plug-ins. Internal plugin directory is added
# automatically. Use this to add custom plug-ins outside the opgee
# source tree. The value is a semicolon-delimited (on Windows) or
# colon-delimited (on Unix) string of directories to search for files
# matching the pattern '*_plugin.py'
OPGEE.PluginPath = %(OPGEE.ProjectDir)s/plugins

# Where to find post-processing plugins. The value is a semicolon-delimited
# (on Windows) or colon-delimited (on Unix) string of directories from which
# to load files. Files are loaded in alphabetical order from each directory
# in the order the directories are specified.
OPGEE.PostProcPluginPath =

# Where to find user-defined LCA model classes. The value is one or more
# Python files or directories, delimited by semicolon (on Windows) or colon
# (on Unix). For directories, all '.py' files found in the directory are
# loaded.
OPGEE.ClassPath =

# Ordinarily, an error is raised if encounter a redefinition of a Process
# subclass. To allow the option of overriding built-in subclasses, the user
# can set this flag to True, which merely emits a warning rather than raising
# an exception.
OPGEE.AllowProcessRedefinition = False

# Where to find user's customizations
OPGEE.UserXmlDirectory = %(Home)s/opgee/%(OPGEE.ProjectName)s

# Default model file. Paths not starting with drive specifier or "/"
# are assumed to be within the opgee package.
OPGEE.ModelFile = etc/opgee.xml

# Default attributes file. Paths not starting with drive specifier or "/"
# are assumed to be within the opgee package.
OPGEE.AttributesFile = etc/attributes.xml

# Where to find user's attributes.xml files (optional)
OPGEE.UserAttributesFile =

# Allow user to provide comma-delimited list of additional components
# that should be allowed in Streams.
OPGEE.StreamComponents =

# If set to a filename, the final expanded, merged XML is save there
OPGEE.XmlSavePathname =

# Default parameter distribution definitions for Monte Carlo simulation
OPGEE.DistributionFile = mcs/etc/parameter-distributions.xml

# Change this if desired to increase or decrease diagnostic messages.
# A default value can be set here, and a project-specific value can
# be set in the project's config file section.
# Possible values (from most to least verbose) are:
# DEBUG, INFO, WARNING, ERROR, CRITICAL
OPGEE.LogLevel = INFO

OPGEE.LogConsole = True

# If set, application logger messages are written here.
OPGEE.LogDir = %(Home)s/tmp
OPGEE.LogFile = %(OPGEE.LogDir)s/opgee.log

# Format strings for log files and console messages. Note doubled
# '%%' required here around logging parameters to avoid attempted
# variable substitution within the config system.
OPGEE.LogFileFormat    = %%(asctime)s %%(levelname)s %%(name)s:%%(lineno)d %%(message)s
OPGEE.LogConsoleFormat = %%(levelname)s %%(name)s: %%(message)s

# Where to create temporary files
OPGEE.TempDir = /tmp

# For debugging purposes: tool.py can show a stack trace on error
OPGEE.ShowStackTrace = False

# TextEditor to open via the --edit option to the 'config' sub-command
OPGEE.TextEditor = vi

# This is the two subprocesses excluded to calculate energy consumption for the NG reinjection option
# energy for all other subprocesses is summarized and converted to the amount of NG consumed
OPGEE.ExcludeFromReinjectionEnergySummary = GasReinjectionCompressor, GasReinjectionWell

OPGEE.FunctionalUnits = oil, gas
OPGEE.Boundaries      = Production, Transportation, Distribution

# Options are "local", "slurm", or "serial" (meaning no cluster)
OPGEE.ClusterType = serial

# The target number of trials to run serially on a worker task
OPGEE.MaxTrialsPerPacket = 10

# The name of an account to use on SLURM, if any
SLURM.Account =

# Where to chdir to before running sbatch script
SLURM.RunDir = %(Home)s/slurm

SLURM.MinutesPerTask = 10

# On Sherlock, there are 20-32 cores on "normal", 24-128 on "serc",
# 20-128 on "owners", with a min of 128 GB per node, and default mem
# of at least 4 GB per CPU
SLURM.CoresPerNode = 20

# By default we use one process per core, avoiding threading issues
SLURM.ProcessesPerCore = 1

# The default partition (other options on Sherlock are: normal, owners)
SLURM.Partition = normal

# Default assumes use of anaconda, but user can redefine SLURM.LoadEnvironment
# to change this
SLURM.CondaEnvironment = opgee

# The name to give the job when running on SLURM
SLURM.JobName = opgee-mcs

# Total amount of memory per job
SLURM.MemPerJob = 20GiB

# Whether to run "nanny" processes on dask
SLURM.UseNanny = True

# Location of log file for use on SLURM
SLURM.LogFile = %(OPGEE.LogDir)s/opgee-slurm.log

# Local (per node) temporary storage
SLURM.TempDir = /tmp/opgee

# Network interface like ‘eth0’ or ‘ib0’. This will be used both for the
# Dask scheduler and the Dask workers interface.
SLURM.Interface =

# Which shell to use for the sbatch script
SLURM.Shell = /usr/bin/bash
